# from typing import List

# def f(ind,num,target,dp):
# 	if (target == 0): return 1
# 	if (ind == 0):
# 		return (num[ind] == target)
# 	if (dp[ind][target] != -1):
# 		return dp[ind][target]
	
# 	notpick = f(ind-1,num,target,dp)
# 	pick = 0
# 	if (num[ind] <= target):
# 		pick = f(ind-1,num,target-num[ind],dp)
		
# 	dp[ind][target] = pick+notpick
# 	return dp[ind][target]
	

# def findWays(num: List[int], tar: int) -> int:
# 	dp=[[-1 for i in range(target+1)] for i in range(n)]
#     n = len(num)
# 	return f(n-1,num,target,dp)

def f(ind,num,target,dp):
	if (target == 0): return 1
	if (ind == 0):
		return (num[ind] == target)
	if (dp[ind][target] != -1):
		return dp[ind][target]
	
	notpick = f(ind-1,num,target,dp)
	pick = 0
	if (num[ind] <= target):
		pick = f(ind-1,num,target-num[ind],dp)
		
	dp[ind][target] = pick+notpick
	return dp[ind][target]
	

def findWays(num: List[int], tar: int) -> int:
	n = len(num)
	dp=[[-1 for i in range(tar+1)] for i in range(n)]
	for i in range(n):
		dp[i][0] = 1
	if (num[0] <= tar):
		dp[0][num[0]] = 1
		
	for i in range(1,n):
		for j in range(1,tar+1):
			notpick = dp[i-1,j]
			pick = 0
			if (num[i] <= tar):
				pick = dp[i-1,j-num[i]]
		
			dp[i][j] = pick+notpick
	return dp[n-1][tar]
		
    
	
	
