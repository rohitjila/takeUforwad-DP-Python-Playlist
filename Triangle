# def minimumPathSum(a, n):
#     dp=[[-1 for i in range(n+1)] for i in range(n+1)]
#     return solve(0, 0,n,a,dp)

def solve(i,j,n,a,dp):
    dp=[[-1 for i in range(n+1)] for i in range(n+1)]
    for j in range(n):
        dp[n-1][j] = a[n-1][j]
    for i in range(n-2,-1,1):
        for j in range(i,-1,1):
             dp[i][j]=a[i][j] + dp[i+1,j]
    		 dp[i][j]=a[i][j] + dp[i+1,j+1]
	return dp[0][0]
        
        
#     if (i == n-1):
#         return a[n-1][j]
#     if (dp[i][j] != -1):
#         return dp[i][j]
#     do=a[i][j] + solve(i+1,j,n,a,dp)
#     dia=a[i][j] + solve(i+1,j+1,n,a,dp)
#     dp[i][j] =  min(do,dia)
#     return dp[i][j]
    
