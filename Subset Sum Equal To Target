# def f(ind,target,arr,dp):
# 	if (target == 0):
# 		return True
# 	if (ind == 0):
# 		return (arr[0] == target)
# 	if (dp[ind][target] != -1):
# 		return dp[ind][target]
	
# 	notTake = f(ind-1,target,arr,dp)
# 	Take= False
# 	if (arr[ind] <= target):
# 		Take=f(ind-1,target - arr[ind],arr,dp)
# 	dp[ind][target] = Take or notTake
# 	return dp[ind][target]
	
def subsetSumToK(n, k, arr):
	dp=[[False for i in range(k+1)] for j in range(n)]
	for i in range(n):
		dp[i][0] = True
	if (arr[0] <= k):
		dp[0][arr[0]] = True
	for ind in range(1,n):
		for target in range(1,k+1):
			notTake = dp[ind-1][target]
			Take= False
			if (arr[ind] <= target):
				Take=dp[ind-1][target-arr[ind]]
			dp[ind][target] = Take or notTake
	return dp[n-1][target]
	
# 	return f(n-1,k,arr,dp)
